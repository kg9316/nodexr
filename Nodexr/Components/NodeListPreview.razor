@inject INodeDragService NodeDragService
@inject INodeHandler NodeHandler
@inject IModalService Modal
@inject IJSRuntime JSRuntime

<div class="node node-preview" draggable="true" @ondragstart="@StartNodeDrag" @ondragend="NodeDragService.CancelDrag">
    <div class="node-title collapsed" style="background-color: @Color; height:100%;">
        @if (Data.NodeIcon.Length > 0)
        {
            <i class=@Data.NodeIcon></i>
            <b> </b>
        }
        <b> @Data.Title</b>
        @if (Data.NodeInfo.Length > 0)
        {
            <button class="icon-button info-button"
                    @onclick="@ShowInfoModal">
                <i class="fas fa-info-circle"></i>
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public RegexNodeViewModelBase Data { get; set; } = null!;

    string Color => $"var(--col-node-{Data.Title.Replace(" ", "").ToLower()})";

    void ShowInfoModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(NodeInfo.InfoText), Data.NodeInfo);
        Modal.Show<NodeInfo>(Data.Title, modalParameters);
    }
    
    void ShowTestModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(NodeInfo.InfoText), Data.NodeInfo);
        Modal.Show<NodeInfo>(Data.Title, modalParameters);
    }

    void StartNodeDrag(DragEventArgs e)
    {
        RegexNodeViewModelBase newNode = (RegexNodeViewModelBase)Activator.CreateInstance(Data.GetType())!;
        NodeDragService.OnStartCreateNodeDrag(newNode, e);
    }

    void AddNode(Type type)
    {
        RegexNodeViewModelBase node = (RegexNodeViewModelBase)Activator.CreateInstance(type)!;
        NodeHandler.Tree.AddNode(node);
    }
}
