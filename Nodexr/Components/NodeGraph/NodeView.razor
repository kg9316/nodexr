@inject INodeHandler NodeHandler
@inject IModalService Modal
@inject INoodleDragService NoodleDragService
@inject DragModule DragModule

@implements IDisposable

<div class="node @CssClass"
     style="transform: @CssTransform; --col-node-accent:@Data.CssColor;"
     ondragleave="tempNoodle.setInvalid()"
     ondragover="event.preventDefault(); tempNoodle.setValid();"
     @onmousedown="OnMouseDown" @onmousedown:stopPropagation
     @oncontextmenu="OnRightClick" @oncontextmenu:preventDefault="true"
     @onfocusin="Deselect"
     @ondrop="@(() => NoodleDragService.OnDropNoodle(Data.PrimaryInput))">

    <div class="node-title @(Data.IsCollapsed ? "collapsed" : "")"
         style="background-color: var(--col-node-accent);">
        @if (!Data.IsCollapsed)
        {
            <button @onclick="ToggleCollapsed" class="collapse-button" title="Collapse"><i class="fas fa-chevron-up"></i></button>
        }
        else
        {
            <button @onclick="ToggleCollapsed" class="collapse-button" title="Uncollapse" style="top:-2px;"><i class="fas fa-chevron-down"></i></button>
        }
        <i class=@Data.NodeIcon></i>
        <b>@Data.Title</b>
        <button class="icon-button info-button" title="About this node"
                @onclick="ShowModal">
            <i class="fas fa-info-circle"></i>
        </button>
    </div>

    @if (!Data.IsCollapsed)
    {
        <div class="node-content"
         @onclick:stopPropagation
         @onkeydown:stopPropagation
         @onmousedown:stopPropagation>
            @foreach (INodeInput nodeInput in Data.NodeInputs)
            {
                if (nodeInput.Enabled())
                {
                    <NodeInputView Data="nodeInput" />
                }
            }
        </div>
    }

    <NodeInputDot Input="Data.PrimaryInput" IsPrevious="true" />

    @*Output dot*@
    @if (!(Data is OutputNode))
    {
        <NodeOutputDot Data="Data" />
    }
</div>

@code {
    [Parameter] public INodeViewModel Data { get; set; } = null!;

    string CssClass => Data.Selected ? "node-selected" : "";
    string CssTransform => FormattableString.Invariant($"translate({(long)Data.Pos.x}px, {(long)Data.Pos.y}px)");

    private DotNetObjectReference<NodeView>? thisRef;
    private Vector2 lastCursorPos;

    protected override void OnInitialized()
    {
        Data.OutputChanged += Refresh;
        Data.LayoutChanged += Refresh;
        Data.SelectionChanged += Refresh;
        thisRef = DotNetObjectReference.Create(this);
    }

    void ToggleCollapsed()
    {
        Data.IsCollapsed = !Data.IsCollapsed;
        Data.OnLayoutChanged();
    }

    async Task OnMouseDown(MouseEventArgs e)
    {
        var isMultiSelect = e.ShiftKey || e.CtrlKey;
        NodeHandler.Tree.SelectNode(Data, isMultiSelect);

        if (!isMultiSelect)
        {
            lastCursorPos = e.GetClientPos();
            await DragModule.StartDrag(thisRef!, nameof(OnDrag));
        }
    }

    public void OnRightClick(MouseEventArgs e)
    {
        //ToDo
    }

    [JSInvokable]
    public void OnDrag(int clientX, int clientY)
    {
        DragSelectedNodes(clientX, clientY);
    }

    void DragSelectedNodes(double posX, double posY)
    {
        var newCursorPos = new Vector2(posX, posY);
        var dragOffset = (newCursorPos - lastCursorPos) / ZoomHandler.Zoom;
        lastCursorPos = new Vector2(posX, posY);

        var nodesToMove = NodeHandler.Tree.GetSelectedNodes();
        foreach (var node in nodesToMove)
        {
            node.Pos += dragOffset;
        }
    }

    void ShowModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(NodeInfo.InfoText), Data.NodeInfo);
        Modal.Show<NodeInfo>(Data.Title, modalParameters);
    }

    void Refresh() => StateHasChanged();

    void Deselect()
    {
        NodeHandler.Tree.DeselectAllNodes();
    }

    public void Dispose()
    {
        Data.OutputChanged -= Refresh;
        Data.LayoutChanged -= Refresh;
        Data.SelectionChanged -= Refresh;
        thisRef?.Dispose();
    }
}
